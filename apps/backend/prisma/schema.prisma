generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Story {
  id              Int           @id @default(autoincrement())
  storyText       String
  translationText String
  audioUrl        String
  unknownWords    UnknownWord[]
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
}

model UnknownWord {
  id                         Int        @id @default(autoincrement())
  word                       String
  translation                String
  article                    String?
  exampleSentence            String
  exampleSentenceTranslation String
  timesSeen                  Int        @default(1)
  status                     WordStatus @default(learning)
  stories                    Story[]
  user                       User       @relation(fields: [userId], references: [id])
  userId                     Int
}

model UserVocabulary {
  id          Int     @id @default(autoincrement())
  word        String
  translation String
  article     String?
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  stories        Story[]
  userVocabulary UserVocabulary[]
  UnknownWord    UnknownWord[]
  RefreshToken   RefreshToken[]
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  expiresAt  DateTime
  revokedAt  DateTime?
  replacedBy String?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model WordRanking {
  id              Int    @id @default(autoincrement())
  source_language String
  target_language String
  word            String
  translation     String
  frequencyRank   Int
}

enum WordStatus {
  learning
  learned
}

enum SessionStatus {
  active
  completed
  expired
}
